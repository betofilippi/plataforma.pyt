# ==============================================================================
# Redis Cache and Session Store Deployment for Plataforma FastAPI Backend
# ==============================================================================

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: plataforma-fastapi
  labels:
    app: plataforma-fastapi
    component: cache
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: fast-ssd  # Adjust based on your cluster

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  namespace: plataforma-fastapi
  labels:
    app: plataforma-fastapi
    component: cache
spec:
  replicas: 1  # Redis should be single instance for simplicity
  strategy:
    type: Recreate  # Important for stateful cache
  selector:
    matchLabels:
      app: plataforma-fastapi
      component: cache
  template:
    metadata:
      labels:
        app: plataforma-fastapi
        component: cache
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        fsGroup: 999  # redis group
        runAsUser: 999  # redis user
      containers:
        - name: redis
          image: redis:7-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 6379
              name: redis
              protocol: TCP
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-secrets
                  key: REDIS_PASSWORD
          command:
            - redis-server
            - /etc/redis/redis.conf
            - --requirepass
            - $(REDIS_PASSWORD)
          volumeMounts:
            - name: redis-storage
              mountPath: /data
            - name: redis-config
              mountPath: /etc/redis
              readOnly: true
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          livenessProbe:
            exec:
              command:
                - redis-cli
                - --no-auth-warning
                - -a
                - $(REDIS_PASSWORD)
                - ping
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            exec:
              command:
                - redis-cli
                - --no-auth-warning
                - -a
                - $(REDIS_PASSWORD)
                - ping
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3

        # Redis Exporter for Prometheus
        - name: redis-exporter
          image: oliver006/redis_exporter:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9121
              name: metrics
              protocol: TCP
          env:
            - name: REDIS_ADDR
              value: "redis://localhost:6379"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-secrets
                  key: REDIS_PASSWORD
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
          livenessProbe:
            httpGet:
              path: /metrics
              port: 9121
            initialDelaySeconds: 30
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /metrics
              port: 9121
            initialDelaySeconds: 5
            periodSeconds: 5

      volumes:
        - name: redis-storage
          persistentVolumeClaim:
            claimName: redis-pvc
        - name: redis-config
          configMap:
            name: redis-config
            items:
              - key: redis.conf
                path: redis.conf

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: plataforma-fastapi
  labels:
    app: plataforma-fastapi
    component: cache
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9121"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
    - port: 6379
      targetPort: 6379
      protocol: TCP
      name: redis
    - port: 9121
      targetPort: 9121
      protocol: TCP
      name: metrics
  selector:
    app: plataforma-fastapi
    component: cache

---
# Optional: Redis Sentinel for High Availability (Advanced)
# Uncomment if you need Redis HA with automatic failover
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: redis-sentinel-deployment
#   namespace: plataforma-fastapi
#   labels:
#     app: plataforma-fastapi
#     component: cache-sentinel
# spec:
#   replicas: 3  # Odd number for quorum
#   selector:
#     matchLabels:
#       app: plataforma-fastapi
#       component: cache-sentinel
#   template:
#     metadata:
#       labels:
#         app: plataforma-fastapi
#         component: cache-sentinel
#     spec:
#       containers:
#         - name: redis-sentinel
#           image: redis:7-alpine
#           command:
#             - redis-sentinel
#             - /etc/redis/sentinel.conf
#             - --sentinel
#             - deny-scripts-reconfig
#             - "no"
#           ports:
#             - containerPort: 26379
#               name: sentinel
#               protocol: TCP
#           volumeMounts:
#             - name: sentinel-config
#               mountPath: /etc/redis
#               readOnly: true
#           resources:
#             requests:
#               memory: "128Mi"
#               cpu: "100m"
#             limits:
#               memory: "256Mi"
#               cpu: "200m"
#       volumes:
#         - name: sentinel-config
#           configMap:
#             name: redis-sentinel-config

# ---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: redis-sentinel-config
#   namespace: plataforma-fastapi
#   labels:
#     app: plataforma-fastapi
#     component: cache-sentinel
# data:
#   sentinel.conf: |
#     port 26379
#     sentinel announce-ip redis-sentinel-service
#     sentinel announce-port 26379
#     sentinel monitor mymaster redis-service 6379 2
#     sentinel down-after-milliseconds mymaster 10000
#     sentinel parallel-syncs mymaster 1
#     sentinel failover-timeout mymaster 180000
#     sentinel auth-pass mymaster ${REDIS_PASSWORD}

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: redis-sentinel-service
#   namespace: plataforma-fastapi
#   labels:
#     app: plataforma-fastapi
#     component: cache-sentinel
# spec:
#   type: ClusterIP
#   ports:
#     - port: 26379
#       targetPort: 26379
#       protocol: TCP
#       name: sentinel
#   selector:
#     app: plataforma-fastapi
#     component: cache-sentinel