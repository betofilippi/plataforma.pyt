# ==============================================================================
# FastAPI Application Deployment for Plataforma Backend
# ==============================================================================

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: fastapi-storage-pvc
  namespace: plataforma-fastapi
  labels:
    app: plataforma-fastapi
    component: api-storage
spec:
  accessModes:
    - ReadWriteMany  # Multiple pods need access
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard  # Adjust based on your cluster

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: fastapi-logs-pvc
  namespace: plataforma-fastapi
  labels:
    app: plataforma-fastapi
    component: api-logs
spec:
  accessModes:
    - ReadWriteMany  # Multiple pods need access
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fastapi-deployment
  namespace: plataforma-fastapi
  labels:
    app: plataforma-fastapi
    component: api
spec:
  replicas: 3  # Multiple instances for HA
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: plataforma-fastapi
      component: api
  template:
    metadata:
      labels:
        app: plataforma-fastapi
        component: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        fsGroup: 1000  # appuser group from Dockerfile
      initContainers:
        # Wait for database to be ready and run migrations
        - name: migrate
          image: plataforma-fastapi:latest
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -c
            - |
              set -e
              echo "Waiting for database to be ready..."
              until python -c "
              import asyncio
              import asyncpg
              import sys
              from urllib.parse import urlparse
              
              async def check_db():
                  url = '$DATABASE_URL'
                  parsed = urlparse(url)
                  try:
                      conn = await asyncpg.connect(
                          host=parsed.hostname,
                          port=parsed.port or 5432,
                          user=parsed.username,
                          password=parsed.password,
                          database=parsed.path.lstrip('/')
                      )
                      await conn.close()
                      return True
                  except Exception as e:
                      print(f'Database not ready: {e}')
                      return False
              
              if not asyncio.run(check_db()):
                  sys.exit(1)
              "; do
                echo "Database not ready, waiting..."
                sleep 5
              done
              
              echo "Database is ready, running migrations..."
              alembic upgrade head
              echo "Migrations completed successfully"
          env:
            - name: DATABASE_URL
              value: "postgresql+asyncpg://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@postgres-service:5432/$(POSTGRES_DB)"
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: POSTGRES_DB
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"

      containers:
        - name: fastapi
          image: plataforma-fastapi:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8000
              name: http
              protocol: TCP
          env:
            # Application settings from ConfigMap
            - name: APP_NAME
              valueFrom:
                configMapKeyRef:
                  name: fastapi-config
                  key: APP_NAME
            - name: APP_VERSION
              valueFrom:
                configMapKeyRef:
                  name: fastapi-config
                  key: APP_VERSION
            - name: ENVIRONMENT
              valueFrom:
                configMapKeyRef:
                  name: fastapi-config
                  key: ENVIRONMENT
            - name: DEBUG
              valueFrom:
                configMapKeyRef:
                  name: fastapi-config
                  key: DEBUG
            
            # Server settings
            - name: SERVER_HOST
              valueFrom:
                configMapKeyRef:
                  name: fastapi-config
                  key: SERVER_HOST
            - name: SERVER_PORT
              valueFrom:
                configMapKeyRef:
                  name: fastapi-config
                  key: SERVER_PORT
            
            # Database connection
            - name: DATABASE_URL
              value: "postgresql+asyncpg://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@postgres-service:5432/$(POSTGRES_DB)"
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: POSTGRES_DB
            
            # Database pool settings
            - name: DATABASE_POOL_SIZE
              valueFrom:
                configMapKeyRef:
                  name: fastapi-config
                  key: DATABASE_POOL_SIZE
            - name: DATABASE_MAX_OVERFLOW
              valueFrom:
                configMapKeyRef:
                  name: fastapi-config
                  key: DATABASE_MAX_OVERFLOW
            
            # Redis connection
            - name: REDIS_URL
              value: "redis://:$(REDIS_PASSWORD)@redis-service:6379/0"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-secrets
                  key: REDIS_PASSWORD
            
            # Security settings from Secrets
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: fastapi-secrets
                  key: SECRET_KEY
            - name: JWT_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: fastapi-secrets
                  key: JWT_SECRET_KEY
            - name: SESSION_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: fastapi-secrets
                  key: SESSION_SECRET_KEY
            
            # JWT settings
            - name: JWT_ALGORITHM
              valueFrom:
                configMapKeyRef:
                  name: fastapi-config
                  key: JWT_ALGORITHM
            - name: JWT_ACCESS_TOKEN_EXPIRE_MINUTES
              valueFrom:
                configMapKeyRef:
                  name: fastapi-config
                  key: JWT_ACCESS_TOKEN_EXPIRE_MINUTES
            
            # CORS settings
            - name: CORS_ORIGINS
              valueFrom:
                configMapKeyRef:
                  name: fastapi-config
                  key: CORS_ORIGINS
            
            # Rate limiting
            - name: DISABLE_RATE_LIMITING
              valueFrom:
                configMapKeyRef:
                  name: fastapi-config
                  key: DISABLE_RATE_LIMITING
            - name: RATE_LIMIT_PER_MINUTE
              valueFrom:
                configMapKeyRef:
                  name: fastapi-config
                  key: RATE_LIMIT_PER_MINUTE
            
            # External services
            - name: SUPABASE_URL
              valueFrom:
                secretKeyRef:
                  name: fastapi-secrets
                  key: SUPABASE_URL
                  optional: true
            - name: SUPABASE_ANON_KEY
              valueFrom:
                secretKeyRef:
                  name: fastapi-secrets
                  key: SUPABASE_ANON_KEY
                  optional: true
            - name: SUPABASE_SERVICE_KEY
              valueFrom:
                secretKeyRef:
                  name: fastapi-secrets
                  key: SUPABASE_SERVICE_KEY
                  optional: true
            
            # Monitoring
            - name: SENTRY_DSN
              valueFrom:
                secretKeyRef:
                  name: fastapi-secrets
                  key: SENTRY_DSN
                  optional: true
            - name: SENTRY_ENVIRONMENT
              valueFrom:
                configMapKeyRef:
                  name: fastapi-config
                  key: SENTRY_ENVIRONMENT
            
            # Logging
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: fastapi-config
                  key: LOG_LEVEL
            - name: LOG_FORMAT
              valueFrom:
                configMapKeyRef:
                  name: fastapi-config
                  key: LOG_FORMAT
            
            # File storage
            - name: STORAGE_PATH
              valueFrom:
                configMapKeyRef:
                  name: fastapi-config
                  key: STORAGE_PATH
            - name: UPLOAD_MAX_SIZE
              valueFrom:
                configMapKeyRef:
                  name: fastapi-config
                  key: UPLOAD_MAX_SIZE
            - name: UPLOAD_ALLOWED_EXTENSIONS
              valueFrom:
                configMapKeyRef:
                  name: fastapi-config
                  key: UPLOAD_ALLOWED_EXTENSIONS
          
          volumeMounts:
            - name: storage
              mountPath: /app/storage
            - name: logs
              mountPath: /app/logs
          
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1000m"
          
          livenessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          
          readinessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          
          startupProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 12  # Allow 1 minute for startup

      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: fastapi-storage-pvc
        - name: logs
          persistentVolumeClaim:
            claimName: fastapi-logs-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: fastapi-service
  namespace: plataforma-fastapi
  labels:
    app: plataforma-fastapi
    component: api
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
    - port: 8000
      targetPort: 8000
      protocol: TCP
      name: http
  selector:
    app: plataforma-fastapi
    component: api

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: fastapi-hpa
  namespace: plataforma-fastapi
  labels:
    app: plataforma-fastapi
    component: api
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: fastapi-deployment
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300  # 5 minutes
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60   # 1 minute
      policies:
        - type: Percent
          value: 100
          periodSeconds: 60
        - type: Pods
          value: 2
          periodSeconds: 60

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: fastapi-pdb
  namespace: plataforma-fastapi
  labels:
    app: plataforma-fastapi
    component: api
spec:
  minAvailable: 1  # Keep at least 1 pod running during disruptions
  selector:
    matchLabels:
      app: plataforma-fastapi
      component: api