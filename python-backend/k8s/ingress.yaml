# ==============================================================================
# Ingress Configuration for Plataforma FastAPI Backend
# ==============================================================================

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fastapi-ingress
  namespace: plataforma-fastapi
  labels:
    app: plataforma-fastapi
    component: ingress
  annotations:
    # NGINX Ingress Controller annotations
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    
    # SSL/TLS settings
    cert-manager.io/cluster-issuer: "letsencrypt-prod"  # If using cert-manager
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Permissions-Policy "camera=(), microphone=(), geolocation=()" always;
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-burst: "150"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # Proxy settings
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    
    # CORS settings
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://yourdomain.com,https://www.yourdomain.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS, PATCH"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Accept,Accept-Language,Content-Type,Authorization,X-Requested-With,X-CSRF-Token,Cache-Control"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    
    # Load balancer settings
    nginx.ingress.kubernetes.io/upstream-hash-by: "$binary_remote_addr"
    nginx.ingress.kubernetes.io/session-affinity: "cookie"
    nginx.ingress.kubernetes.io/session-affinity-mode: "persistent"
    
    # Monitoring
    nginx.ingress.kubernetes.io/server-snippet: |
      location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
      }

spec:
  tls:
    - hosts:
        - api.yourdomain.com
        - www.api.yourdomain.com
      secretName: tls-certificate
  
  rules:
    - host: api.yourdomain.com
      http:
        paths:
          # Main API routes
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: fastapi-service
                port:
                  number: 8000
          
          # Health check endpoint
          - path: /health
            pathType: Exact
            backend:
              service:
                name: fastapi-service
                port:
                  number: 8000
          
          # Metrics endpoint (restricted access)
          - path: /metrics
            pathType: Exact
            backend:
              service:
                name: fastapi-service
                port:
                  number: 8000
          
          # Documentation endpoints (if enabled)
          - path: /docs
            pathType: Exact
            backend:
              service:
                name: fastapi-service
                port:
                  number: 8000
          
          - path: /redoc
            pathType: Exact
            backend:
              service:
                name: fastapi-service
                port:
                  number: 8000
          
          - path: /openapi.json
            pathType: Exact
            backend:
              service:
                name: fastapi-service
                port:
                  number: 8000

    # Alternative domain
    - host: www.api.yourdomain.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: fastapi-service
                port:
                  number: 8000

---
# Auth-specific Ingress with stricter rate limiting
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fastapi-auth-ingress
  namespace: plataforma-fastapi
  labels:
    app: plataforma-fastapi
    component: auth-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    
    # Stricter rate limiting for auth endpoints
    nginx.ingress.kubernetes.io/rate-limit: "10"
    nginx.ingress.kubernetes.io/rate-limit-burst: "15"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # Additional security for auth endpoints
    nginx.ingress.kubernetes.io/server-snippet: |
      # Block common attack patterns
      if ($request_uri ~* "/(\.\./)|(etc/passwd)|(boot\.ini)") {
        return 403;
      }
      
      # Rate limit by IP for auth endpoints
      limit_req zone=auth_zone burst=5 nodelay;
    
    # CSRF protection
    nginx.ingress.kubernetes.io/configuration-snippet: |
      set $csrf_token $http_x_csrf_token;
      if ($request_method = POST) {
        if ($csrf_token = "") {
          return 403;
        }
      }

spec:
  tls:
    - hosts:
        - auth.yourdomain.com
      secretName: tls-certificate
  
  rules:
    - host: auth.yourdomain.com
      http:
        paths:
          - path: /api/v1/auth
            pathType: Prefix
            backend:
              service:
                name: fastapi-service
                port:
                  number: 8000

---
# Internal services Ingress (for monitoring tools)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fastapi-internal-ingress
  namespace: plataforma-fastapi
  labels:
    app: plataforma-fastapi
    component: internal-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    
    # Restrict access to internal networks only
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
    
    # Basic auth for additional security (optional)
    # nginx.ingress.kubernetes.io/auth-type: basic
    # nginx.ingress.kubernetes.io/auth-secret: basic-auth-secret
    # nginx.ingress.kubernetes.io/auth-realm: "Restricted Access"

spec:
  tls:
    - hosts:
        - internal.yourdomain.com
      secretName: tls-certificate
  
  rules:
    - host: internal.yourdomain.com
      http:
        paths:
          # Prometheus metrics
          - path: /prometheus
            pathType: Prefix
            backend:
              service:
                name: prometheus-service
                port:
                  number: 9090
          
          # Grafana dashboards
          - path: /grafana
            pathType: Prefix
            backend:
              service:
                name: grafana-service
                port:
                  number: 3000
          
          # Application metrics
          - path: /metrics
            pathType: Exact
            backend:
              service:
                name: fastapi-service
                port:
                  number: 8000

---
# Network Policy to control ingress traffic
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: fastapi-ingress-netpol
  namespace: plataforma-fastapi
  labels:
    app: plataforma-fastapi
    component: network-policy
spec:
  podSelector:
    matchLabels:
      app: plataforma-fastapi
      component: api
  
  policyTypes:
    - Ingress
    - Egress
  
  ingress:
    # Allow traffic from ingress controller
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 8000
    
    # Allow traffic from monitoring namespace
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 8000
    
    # Allow internal cluster communication
    - from:
        - podSelector:
            matchLabels:
              app: plataforma-fastapi
      ports:
        - protocol: TCP
          port: 8000
  
  egress:
    # Allow database connections
    - to:
        - podSelector:
            matchLabels:
              app: plataforma-fastapi
              component: database
      ports:
        - protocol: TCP
          port: 5432
    
    # Allow Redis connections
    - to:
        - podSelector:
            matchLabels:
              app: plataforma-fastapi
              component: cache
      ports:
        - protocol: TCP
          port: 6379
    
    # Allow DNS
    - to: []
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53
    
    # Allow HTTPS for external API calls
    - to: []
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 80

---
# Certificate for Let's Encrypt (if using cert-manager)
# apiVersion: cert-manager.io/v1
# kind: Certificate
# metadata:
#   name: fastapi-tls-certificate
#   namespace: plataforma-fastapi
# spec:
#   secretName: tls-certificate
#   issuerRef:
#     name: letsencrypt-prod
#     kind: ClusterIssuer
#   dnsNames:
#     - api.yourdomain.com
#     - www.api.yourdomain.com
#     - auth.yourdomain.com
#     - internal.yourdomain.com