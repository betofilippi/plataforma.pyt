# ==============================================================================
# PostgreSQL Database Deployment for Plataforma FastAPI Backend
# ==============================================================================

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: plataforma-fastapi
  labels:
    app: plataforma-fastapi
    component: database
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: fast-ssd  # Adjust based on your cluster

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-backup-pvc
  namespace: plataforma-fastapi
  labels:
    app: plataforma-fastapi
    component: database-backup
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: standard  # Can use slower storage for backups

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  namespace: plataforma-fastapi
  labels:
    app: plataforma-fastapi
    component: database
spec:
  replicas: 1  # PostgreSQL primary should be single instance
  strategy:
    type: Recreate  # Important for stateful database
  selector:
    matchLabels:
      app: plataforma-fastapi
      component: database
  template:
    metadata:
      labels:
        app: plataforma-fastapi
        component: database
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        fsGroup: 999  # postgres group
      containers:
        - name: postgres
          image: postgres:15-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5432
              name: postgres
              protocol: TCP
          env:
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: POSTGRES_DB
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: POSTGRES_PASSWORD
            - name: PGDATA
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: PGDATA
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
            - name: postgres-backup
              mountPath: /backup
            - name: init-scripts
              mountPath: /docker-entrypoint-initdb.d
              readOnly: true
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1000m"
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U $POSTGRES_USER -d $POSTGRES_DB -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U $POSTGRES_USER -d $POSTGRES_DB -h 127.0.0.1 -p 5432
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          args:
            - postgres
            - -c
            - shared_preload_libraries=pg_stat_statements
            - -c
            - pg_stat_statements.track=all
            - -c
            - max_connections=200
            - -c
            - shared_buffers=256MB
            - -c
            - effective_cache_size=1GB
            - -c
            - maintenance_work_mem=64MB
            - -c
            - checkpoint_completion_target=0.9
            - -c
            - wal_buffers=16MB
            - -c
            - default_statistics_target=100
            - -c
            - random_page_cost=1.1
            - -c
            - effective_io_concurrency=200
            - -c
            - work_mem=4MB
            - -c
            - min_wal_size=1GB
            - -c
            - max_wal_size=4GB
            - -c
            - max_worker_processes=8
            - -c
            - max_parallel_workers_per_gather=4
            - -c
            - max_parallel_workers=8
            - -c
            - max_parallel_maintenance_workers=4

        # PostgreSQL Exporter for Prometheus
        - name: postgres-exporter
          image: prometheuscommunity/postgres-exporter:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9187
              name: metrics
              protocol: TCP
          env:
            - name: DATA_SOURCE_NAME
              value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@localhost:5432/$(POSTGRES_DB)?sslmode=disable"
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: POSTGRES_DB
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
          livenessProbe:
            httpGet:
              path: /metrics
              port: 9187
            initialDelaySeconds: 30
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /metrics
              port: 9187
            initialDelaySeconds: 5
            periodSeconds: 5

      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc
        - name: postgres-backup
          persistentVolumeClaim:
            claimName: postgres-backup-pvc
        - name: init-scripts
          configMap:
            name: postgres-init-scripts
            optional: true

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: plataforma-fastapi
  labels:
    app: plataforma-fastapi
    component: database
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9187"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432
      protocol: TCP
      name: postgres
    - port: 9187
      targetPort: 9187
      protocol: TCP
      name: metrics
  selector:
    app: plataforma-fastapi
    component: database

---
# Optional: PostgreSQL Init Scripts ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: plataforma-fastapi
  labels:
    app: plataforma-fastapi
    component: database-init
data:
  01-extensions.sql: |
    -- Install required PostgreSQL extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";
    
  02-performance-tuning.sql: |
    -- Performance tuning settings
    ALTER SYSTEM SET shared_preload_libraries = 'pg_stat_statements';
    ALTER SYSTEM SET pg_stat_statements.track = 'all';
    ALTER SYSTEM SET pg_stat_statements.max = 10000;
    SELECT pg_reload_conf();

---
# Optional: Backup CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: postgres-backup
  namespace: plataforma-fastapi
  labels:
    app: plataforma-fastapi
    component: database-backup
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: plataforma-fastapi
            component: database-backup
        spec:
          restartPolicy: OnFailure
          containers:
            - name: postgres-backup
              image: postgres:15-alpine
              command:
                - /bin/bash
                - -c
                - |
                  set -e
                  echo "Starting backup at $(date)"
                  BACKUP_FILE="/backup/plataforma_$(date +%Y%m%d_%H%M%S).sql"
                  pg_dump -h postgres-service -U $POSTGRES_USER -d $POSTGRES_DB > $BACKUP_FILE
                  echo "Backup completed: $BACKUP_FILE"
                  
                  # Keep only last 7 days of backups
                  find /backup -name "plataforma_*.sql" -mtime +7 -delete
                  echo "Old backups cleaned up"
                  
                  # Show backup size
                  ls -lh $BACKUP_FILE
              env:
                - name: POSTGRES_USER
                  valueFrom:
                    configMapKeyRef:
                      name: postgres-config
                      key: POSTGRES_USER
                - name: POSTGRES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: postgres-secrets
                      key: POSTGRES_PASSWORD
                - name: POSTGRES_DB
                  valueFrom:
                    configMapKeyRef:
                      name: postgres-config
                      key: POSTGRES_DB
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: postgres-secrets
                      key: POSTGRES_PASSWORD
              volumeMounts:
                - name: postgres-backup
                  mountPath: /backup
              resources:
                requests:
                  memory: "256Mi"
                  cpu: "100m"
                limits:
                  memory: "512Mi"
                  cpu: "500m"
          volumes:
            - name: postgres-backup
              persistentVolumeClaim:
                claimName: postgres-backup-pvc