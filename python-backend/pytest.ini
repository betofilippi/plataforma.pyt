[tool:pytest]
# ================================
# PYTEST CONFIGURATION
# ================================

# Minimum pytest version required
minversion = 6.0

# Test discovery patterns
python_files = test_*.py *_test.py tests.py
python_classes = Test* *Tests
python_functions = test_*

# Test paths
testpaths = tests

# Command line options applied by default
addopts = 
    # Show extra test summary info as specified by chars: (f)ailed, (E)rror, (s)kipped, (x)failed, (X)passed, (p)passed, (P)passed with output, (a)ll except passed (p/P), or (A)ll
    -ra
    # Strict mode for markers - all markers must be registered
    --strict-markers
    # Strict mode for configuration - unknown config options are errors
    --strict-config
    # Coverage options
    --cov=app
    --cov-branch
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    # Performance: capture output only on failure
    --capture=no
    # Show local variables in tracebacks
    --tb=short
    # Disable cacheprovider plugin to avoid cache issues
    -p no:cacheprovider
    # Run tests in parallel (install pytest-xdist for this)
    # -n auto

# Markers - register custom markers here to avoid warnings
markers =
    # Performance markers
    slow: marks tests as slow (deselect with '-m "not slow"')
    fast: marks tests as fast
    
    # Test type markers
    unit: marks tests as unit tests
    integration: marks tests as integration tests
    functional: marks tests as functional tests
    e2e: marks tests as end-to-end tests
    
    # Component markers
    auth: marks tests related to authentication
    database: marks tests that require database
    api: marks tests for API endpoints
    models: marks tests for database models
    services: marks tests for service layer
    tasks: marks tests for background tasks
    
    # Environment markers
    requires_redis: marks tests that require Redis
    requires_postgres: marks tests that require PostgreSQL
    requires_internet: marks tests that require internet connection
    
    # Special markers
    skip_ci: marks tests to skip in CI environment
    flaky: marks tests that are flaky/unstable
    wip: marks tests that are work in progress

# Logging configuration for tests
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Configure logging for captured logs (shown when test fails)
log_capture = true
log_level = INFO
log_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_date_format = %Y-%m-%d %H:%M:%S

# Timeout for tests (requires pytest-timeout)
timeout = 300
timeout_method = thread

# Warnings configuration
filterwarnings =
    # Convert warnings to errors (strict mode)
    error
    # Ignore specific warnings that we can't control
    ignore::UserWarning
    ignore::DeprecationWarning:pkg_resources.*
    ignore::PendingDeprecationWarning
    # SQLAlchemy warnings
    ignore::sqlalchemy.exc.SAWarning
    # FastAPI/Starlette warnings
    ignore::DeprecationWarning:starlette.*
    # Pydantic warnings
    ignore::DeprecationWarning:pydantic.*

# Asyncio configuration
asyncio_mode = auto

# ================================
# COVERAGE CONFIGURATION
# ================================
# Coverage source paths
# (Also configured in pyproject.toml but duplicated here for compatibility)

# Files to include in coverage
# --cov=app (set in addopts above)

# Coverage report options
# --cov-report options set in addopts above

# ================================
# ENVIRONMENT VARIABLES FOR TESTS
# ================================
# Set environment variables for test runs
env =
    ENVIRONMENT = testing
    DATABASE_URL = postgresql://postgres:test_password@localhost:5432/plataforma_nxt_test
    SECRET_KEY = test-secret-key-not-for-production
    REDIS_URL = redis://localhost:6379/15
    DEBUG = false
    LOG_LEVEL = WARNING

# ================================
# COLLECTION CONFIGURATION
# ================================
# Ignore certain directories during test collection
collect_ignore = [
    "migrations",
    "scripts",
    "docs",
    "htmlcov",
    ".venv",
    "venv",
    "build",
    "dist"
]

# Don't collect tests from these patterns
collect_ignore_glob = [
    "**/node_modules/**",
    "**/.git/**",
    "**/build/**",
    "**/dist/**"
]

# ================================
# XFAIL CONFIGURATION
# ================================
# Configure xfail behavior
xfail_strict = true

# ================================
# JUNIT XML CONFIGURATION
# ================================
# Configure JUnit XML output for CI systems
junit_suite_name = plataforma_backend_tests
junit_logging = all
junit_log_passing_tests = true
junit_duration_report = total

# ================================
# MOCK CONFIGURATION
# ================================
# Mock configuration (if using pytest-mock)
mock_use_standalone_module = true