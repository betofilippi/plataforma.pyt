import React, { useState } from 'react';
import { WindowCard, WindowButton } from '@plataforma/design-system';
import { useAuth } from '@plataforma/auth-system';
import { Brain, MessageCircle, Zap, BarChart3, Settings } from 'lucide-react';
import { ChatInterface } from './ChatInterface';
import { AnalysisPanel } from './AnalysisPanel';
import { AISettings } from './AISettings';
import { useAI } from '../hooks/useAI';
import type { ModuleComponentProps } from '../types';

/**
 * Componente principal do m√≥dulo {{displayName}} com IA
 */
export function ModuleComponent({ onClose }: ModuleComponentProps) {
  const { user } = useAuth();
  const { 
    isConnected, 
    currentProvider, 
    availableModels,
    switchProvider,
    testConnection
  } = useAI();

  const [activeTab, setActiveTab] = useState<'chat' | 'analysis' | 'settings'>('chat');
  const [showSettings, setShowSettings] = useState(false);

  const tabs = [
    { id: 'chat', label: 'Chat IA', icon: MessageCircle },
    { id: 'analysis', label: 'An√°lise', icon: BarChart3 },
    { id: 'settings', label: 'Configura√ß√µes', icon: Settings }
  ];

  return (
    <div className="h-full flex flex-col">
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b border-white/10">
        <div className="flex items-center gap-3">
          <div className="w-8 h-8 rounded-lg bg-violet-500/20 flex items-center justify-center">
            <Brain className="w-4 h-4 text-violet-400" />
          </div>
          <div>
            <h1 className="text-lg font-semibold text-white">{{displayName}}</h1>
            <p className="text-sm text-gray-400">{{description}}</p>
          </div>
        </div>
        
        <div className="flex items-center gap-2">
          {/* Connection Status */}
          <div className={`flex items-center gap-2 px-3 py-1 rounded-full text-xs font-medium ${
            isConnected 
              ? 'bg-emerald-500/20 text-emerald-400 border border-emerald-500/30' 
              : 'bg-red-500/20 text-red-400 border border-red-500/30'
          }`}>
            <div className={`w-2 h-2 rounded-full ${isConnected ? 'bg-emerald-400' : 'bg-red-400'}`} />
            {isConnected ? 'Conectado' : 'Desconectado'}
          </div>
          
          <WindowButton
            variant="secondary"
            size="sm"
            icon={<Zap />}
            onClick={testConnection}
            tooltip="Testar Conex√£o IA"
          >
            Testar
          </WindowButton>
        </div>
      </div>

      {/* Provider Status */}
      {user && (
        <div className="p-3 bg-violet-500/10 border-b border-violet-500/20">
          <div className="flex items-center justify-between text-sm">
            <div className="text-violet-300">
              ü§ñ Provider: <span className="font-medium">{currentProvider}</span>
              {availableModels.length > 0 && (
                <span className="ml-2 text-violet-400">
                  ({availableModels.length} modelos dispon√≠veis)
                </span>
              )}
            </div>
            <div className="text-violet-400">
              Usu√°rio: <span className="font-medium">{user.email}</span>
            </div>
          </div>
        </div>
      )}

      {/* Tab Navigation */}
      <div className="flex border-b border-white/10">
        {tabs.map((tab) => {
          const Icon = tab.icon;
          return (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id as any)}
              className={`flex items-center gap-2 px-4 py-3 text-sm font-medium border-b-2 transition-colors ${
                activeTab === tab.id
                  ? 'border-violet-500 text-violet-400 bg-violet-500/10'
                  : 'border-transparent text-gray-400 hover:text-gray-300'
              }`}
            >
              <Icon className="w-4 h-4" />
              {tab.label}
            </button>
          );
        })}
      </div>

      {/* Content Area */}
      <div className="flex-1 overflow-hidden">
        {activeTab === 'chat' && (
          <div className="h-full">
            <ChatInterface />
          </div>
        )}

        {activeTab === 'analysis' && (
          <div className="h-full p-4">
            <AnalysisPanel />
          </div>
        )}

        {activeTab === 'settings' && (
          <div className="h-full p-4">
            <AISettings 
              onProviderChange={switchProvider}
              currentProvider={currentProvider}
              availableModels={availableModels}
            />
          </div>
        )}
      </div>

      {/* Quick Actions Footer */}
      <div className="p-4 border-t border-white/10 bg-black/20">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <div className="text-xs text-gray-400">
              √öltima atualiza√ß√£o: {new Date().toLocaleTimeString('pt-BR')}
            </div>
          </div>
          
          <div className="flex items-center gap-2">
            <WindowButton
              variant="secondary"
              size="sm"
              onClick={() => setActiveTab('chat')}
              disabled={activeTab === 'chat'}
            >
              Chat R√°pido
            </WindowButton>
            
            <WindowButton
              variant="primary"
              size="sm"
              icon={<Zap />}
              onClick={() => {
                // A√ß√£o r√°pida de IA
                console.log('Executando a√ß√£o r√°pida de IA...');
              }}
            >
              A√ß√£o IA
            </WindowButton>
          </div>
        </div>
      </div>
    </div>
  );
}