import React, { useState, useRef, useEffect } from 'react';
import { WindowButton, WindowInput } from '@plataforma/design-system';
import { Send, Loader2, User, Bot, Copy, ThumbsUp, ThumbsDown } from 'lucide-react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import { useAI } from '../hooks/useAI';
import type { ChatMessage } from '../types';

export function ChatInterface() {
  const { sendMessage, isLoading, chatHistory, clearChat } = useAI();
  const [input, setInput] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  // Auto scroll para última mensagem
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [chatHistory, isTyping]);

  // Enviar mensagem
  const handleSend = async () => {
    if (!input.trim() || isLoading) return;

    const message = input.trim();
    setInput('');
    setIsTyping(true);

    try {
      await sendMessage(message);
    } catch (error) {
      console.error('Erro ao enviar mensagem:', error);
    } finally {
      setIsTyping(false);
    }
  };

  // Enviar com Enter
  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };

  // Copiar mensagem
  const copyMessage = (content: string) => {
    navigator.clipboard.writeText(content);
    // TODO: Mostrar toast de sucesso
  };

  // Avaliar resposta
  const rateMessage = (messageId: string, rating: 'up' | 'down') => {
    console.log('Rating message:', messageId, rating);
    // TODO: Implementar sistema de avaliação
  };

  return (
    <div className="h-full flex flex-col">
      {/* Chat Header */}
      <div className="p-4 border-b border-white/10 bg-black/20">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="font-medium text-white">Chat com IA</h3>
            <p className="text-sm text-gray-400">
              {chatHistory.length} mensagens na conversa
            </p>
          </div>
          
          <WindowButton
            variant="secondary"
            size="sm"
            onClick={clearChat}
            disabled={chatHistory.length === 0}
          >
            Limpar Chat
          </WindowButton>
        </div>
      </div>

      {/* Messages Area */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {chatHistory.length === 0 ? (
          <div className="flex items-center justify-center h-full text-center">
            <div>
              <div className="w-16 h-16 mx-auto mb-4 rounded-full bg-violet-500/20 flex items-center justify-center">
                <Bot className="w-8 h-8 text-violet-400" />
              </div>
              <h3 className="text-lg font-medium text-white mb-2">
                Olá! Como posso ajudar?
              </h3>
              <p className="text-gray-400 mb-6 max-w-md">
                Faça uma pergunta ou peça para eu analisar algo. 
                Estou aqui para ajudar com análises, sugestões e muito mais.
              </p>
              
              {/* Sugestões rápidas */}
              <div className="space-y-2">
                <p className="text-sm text-gray-500">Sugestões:</p>
                <div className="flex flex-wrap gap-2 justify-center">
                  {[
                    'Analise estes dados',
                    'Gere um relatório',
                    'Faça sugestões',
                    'Explique conceitos'
                  ].map((suggestion) => (
                    <button
                      key={suggestion}
                      onClick={() => setInput(suggestion)}
                      className="px-3 py-1 text-xs rounded-full bg-white/5 text-gray-400 hover:bg-white/10 hover:text-gray-300 transition-colors"
                    >
                      {suggestion}
                    </button>
                  ))}
                </div>
              </div>
            </div>
          </div>
        ) : (
          <>
            {chatHistory.map((message) => (
              <MessageBubble
                key={message.id}
                message={message}
                onCopy={() => copyMessage(message.content)}
                onRate={(rating) => rateMessage(message.id, rating)}
              />
            ))}

            {/* Typing indicator */}
            {isTyping && (
              <div className="flex items-start gap-3">
                <div className="w-8 h-8 rounded-full bg-violet-500/20 flex items-center justify-center flex-shrink-0">
                  <Bot className="w-4 h-4 text-violet-400" />
                </div>
                <div className="flex items-center gap-1 px-4 py-2 rounded-lg bg-white/5">
                  <div className="flex gap-1">
                    <div className="w-2 h-2 bg-violet-400 rounded-full animate-bounce" />
                    <div className="w-2 h-2 bg-violet-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }} />
                    <div className="w-2 h-2 bg-violet-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }} />
                  </div>
                  <span className="text-sm text-gray-400 ml-2">Digitando...</span>
                </div>
              </div>
            )}
          </>
        )}
        
        <div ref={messagesEndRef} />
      </div>

      {/* Input Area */}
      <div className="p-4 border-t border-white/10 bg-black/20">
        <div className="flex gap-3">
          <div className="flex-1">
            <WindowInput
              ref={inputRef}
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Digite sua mensagem..."
              disabled={isLoading}
              multiline
              rows={1}
            />
          </div>
          
          <WindowButton
            variant="primary"
            icon={isLoading ? <Loader2 className="animate-spin" /> : <Send />}
            onClick={handleSend}
            disabled={!input.trim() || isLoading}
            tooltip="Enviar mensagem (Enter)"
          />
        </div>

        <div className="mt-2 text-xs text-gray-500 flex items-center justify-between">
          <span>Use Shift+Enter para quebra de linha</span>
          <span>{input.length}/2000</span>
        </div>
      </div>
    </div>
  );
}

// Componente de mensagem individual
function MessageBubble({ 
  message, 
  onCopy, 
  onRate 
}: { 
  message: ChatMessage;
  onCopy: () => void;
  onRate: (rating: 'up' | 'down') => void;
}) {
  const isUser = message.role === 'user';
  const Icon = isUser ? User : Bot;

  return (
    <div className={`flex items-start gap-3 ${isUser ? 'flex-row-reverse' : ''}`}>
      <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${
        isUser 
          ? 'bg-blue-500/20' 
          : 'bg-violet-500/20'
      }`}>
        <Icon className={`w-4 h-4 ${isUser ? 'text-blue-400' : 'text-violet-400'}`} />
      </div>

      <div className={`flex-1 max-w-[80%] ${isUser ? 'text-right' : ''}`}>
        <div className={`inline-block px-4 py-2 rounded-lg ${
          isUser 
            ? 'bg-blue-500/20 text-blue-100' 
            : 'bg-white/5 text-gray-100'
        }`}>
          {isUser ? (
            <p className="whitespace-pre-wrap">{message.content}</p>
          ) : (
            <ReactMarkdown 
              remarkPlugins={[remarkGfm]}
              className="prose prose-sm prose-invert max-w-none"
            >
              {message.content}
            </ReactMarkdown>
          )}
        </div>

        <div className="mt-1 flex items-center gap-2 text-xs text-gray-500">
          <span>{new Date(message.timestamp).toLocaleTimeString('pt-BR')}</span>
          
          {!isUser && (
            <>
              <button
                onClick={onCopy}
                className="hover:text-gray-400 transition-colors"
                title="Copiar"
              >
                <Copy className="w-3 h-3" />
              </button>
              
              <button
                onClick={() => onRate('up')}
                className="hover:text-emerald-400 transition-colors"
                title="Útil"
              >
                <ThumbsUp className="w-3 h-3" />
              </button>
              
              <button
                onClick={() => onRate('down')}
                className="hover:text-red-400 transition-colors"
                title="Não útil"
              >
                <ThumbsDown className="w-3 h-3" />
              </button>
            </>
          )}
        </div>
      </div>
    </div>
  );
}