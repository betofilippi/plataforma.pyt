import React from 'react';

/**
 * Configuração do módulo
 */
export interface ModuleConfig {
  name: string;
  displayName: string;
  version: string;
  category: string;
  description: string;
  icon: string;
  color: string;
}

/**
 * Props do componente principal do módulo
 */
export interface ModuleComponentProps {
  onClose?: () => void;
  onMinimize?: () => void;
  onMaximize?: () => void;
  windowId?: string;
  data?: any;
}

/**
 * Exportações do módulo
 */
export interface ModuleExports {
  config: ModuleConfig;
  Component: React.ComponentType<ModuleComponentProps>;
  hooks?: Record<string, any>;
  utils?: Record<string, any>;
  services?: Record<string, any>;
}

/**
 * Item de dados do banco de dados
 */
export interface DataItem {
  id: string;
  name: string;
  description?: string;
  status: 'active' | 'inactive';
  created_at: string;
  updated_at: string;
  created_by: string;
}

/**
 * Estados do módulo
 */
export interface ModuleState {
  isLoading: boolean;
  error?: string;
  data: DataItem[];
  selectedItems: string[];
  searchTerm: string;
  currentFilter: string;
}

/**
 * Ações do módulo
 */
export type ModuleAction = 
  | { type: 'SET_LOADING'; payload: boolean }
  | { type: 'SET_ERROR'; payload: string }
  | { type: 'SET_DATA'; payload: DataItem[] }
  | { type: 'ADD_DATA'; payload: DataItem }
  | { type: 'UPDATE_DATA'; payload: { id: string; data: Partial<DataItem> } }
  | { type: 'REMOVE_DATA'; payload: string }
  | { type: 'SET_SELECTED'; payload: string[] }
  | { type: 'SET_SEARCH'; payload: string }
  | { type: 'SET_FILTER'; payload: string }
  | { type: 'CLEAR_DATA' };

/**
 * Filtros disponíveis
 */
export type DataFilter = 'all' | 'active' | 'inactive';

/**
 * Opções de ordenação
 */
export type SortOption = 'name' | 'created_at' | 'updated_at' | 'status';

/**
 * Configurações de paginação
 */
export interface PaginationConfig {
  page: number;
  limit: number;
  total: number;
}

/**
 * Resposta da API com paginação
 */
export interface ApiResponse<T> {
  data: T[];
  pagination: PaginationConfig;
  success: boolean;
  message?: string;
}

/**
 * Configurações do formulário
 */
export interface FormConfig {
  fields: FormField[];
  validation: ValidationRule[];
}

/**
 * Campo do formulário
 */
export interface FormField {
  name: string;
  label: string;
  type: 'text' | 'textarea' | 'select' | 'checkbox' | 'date';
  required?: boolean;
  placeholder?: string;
  options?: { value: string; label: string }[];
  validation?: ValidationRule[];
}

/**
 * Regra de validação
 */
export interface ValidationRule {
  field: string;
  rule: 'required' | 'minLength' | 'maxLength' | 'email' | 'custom';
  value?: any;
  message: string;
  validator?: (value: any) => boolean;
}

// Adicione mais tipos específicos do seu módulo aqui