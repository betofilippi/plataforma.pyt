import { useState, useEffect } from 'react';
import { useAuth } from '@plataforma/auth-system';
import { dataService } from '../services/dataService';
import type { DataItem } from '../types';

export function useModuleData() {
  const { user } = useAuth();
  const [data, setData] = useState<DataItem[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Buscar dados iniciais
  const fetchData = async () => {
    if (!user) return;
    
    setIsLoading(true);
    setError(null);
    
    try {
      const result = await dataService.getAll();
      setData(result);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Erro ao carregar dados');
      console.error('Erro ao buscar dados:', err);
    } finally {
      setIsLoading(false);
    }
  };

  // Criar novo item
  const createItem = async (itemData: Partial<DataItem>) => {
    setIsLoading(true);
    setError(null);
    
    try {
      const newItem = await dataService.create({
        ...itemData,
        created_by: user?.id
      });
      
      setData(prevData => [newItem, ...prevData]);
      return newItem;
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Erro ao criar item');
      throw err;
    } finally {
      setIsLoading(false);
    }
  };

  // Atualizar item existente
  const updateItem = async (id: string, updates: Partial<DataItem>) => {
    setIsLoading(true);
    setError(null);
    
    try {
      const updatedItem = await dataService.update(id, {
        ...updates,
        updated_at: new Date().toISOString()
      });
      
      setData(prevData =>
        prevData.map(item => item.id === id ? updatedItem : item)
      );
      
      return updatedItem;
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Erro ao atualizar item');
      throw err;
    } finally {
      setIsLoading(false);
    }
  };

  // Excluir item
  const deleteItem = async (id: string) => {
    setIsLoading(true);
    setError(null);
    
    try {
      await dataService.delete(id);
      setData(prevData => prevData.filter(item => item.id !== id));
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Erro ao excluir item');
      throw err;
    } finally {
      setIsLoading(false);
    }
  };

  // Refresh dos dados
  const refreshData = () => {
    fetchData();
  };

  // Buscar por termo
  const searchItems = async (searchTerm: string) => {
    if (!user) return;
    
    setIsLoading(true);
    setError(null);
    
    try {
      const result = await dataService.search(searchTerm);
      setData(result);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Erro ao pesquisar');
      console.error('Erro na pesquisa:', err);
    } finally {
      setIsLoading(false);
    }
  };

  // Filtrar por status
  const filterByStatus = async (status: string) => {
    if (!user) return;
    
    setIsLoading(true);
    setError(null);
    
    try {
      const result = await dataService.getByStatus(status);
      setData(result);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Erro ao filtrar por status');
      console.error('Erro no filtro:', err);
    } finally {
      setIsLoading(false);
    }
  };

  // Carregar dados quando usuário estiver disponível
  useEffect(() => {
    if (user) {
      fetchData();
    } else {
      setData([]);
      setError(null);
    }
  }, [user]);

  return {
    data,
    isLoading,
    error,
    createItem,
    updateItem,
    deleteItem,
    refreshData,
    searchItems,
    filterByStatus
  };
}