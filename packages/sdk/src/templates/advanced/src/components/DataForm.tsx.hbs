import React, { useState, useEffect } from 'react';
import { WindowButton, WindowInput } from '@plataforma/design-system';
import { Save, X } from 'lucide-react';
import type { DataItem } from '../types';

interface DataFormProps {
  initialData?: DataItem | null;
  onSubmit: (data: Partial<DataItem>) => Promise<void>;
  onCancel: () => void;
  isLoading?: boolean;
}

export function DataForm({ initialData, onSubmit, onCancel, isLoading }: DataFormProps) {
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    status: 'active' as const
  });

  const [errors, setErrors] = useState<Record<string, string>>({});

  useEffect(() => {
    if (initialData) {
      setFormData({
        name: initialData.name || '',
        description: initialData.description || '',
        status: initialData.status || 'active'
      });
    }
  }, [initialData]);

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    if (!formData.name.trim()) {
      newErrors.name = 'Nome é obrigatório';
    } else if (formData.name.length < 3) {
      newErrors.name = 'Nome deve ter pelo menos 3 caracteres';
    }

    if (formData.description && formData.description.length > 500) {
      newErrors.description = 'Descrição deve ter no máximo 500 caracteres';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) {
      return;
    }

    try {
      await onSubmit(formData);
    } catch (error) {
      console.error('Erro ao enviar formulário:', error);
    }
  };

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    
    // Limpar erro do campo quando usuário começar a digitar
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      {/* Nome */}
      <div>
        <WindowInput
          label="Nome *"
          value={formData.name}
          onChange={(e) => handleInputChange('name', e.target.value)}
          placeholder="Digite o nome do item"
          disabled={isLoading}
          error={errors.name}
        />
      </div>

      {/* Descrição */}
      <div>
        <label className="block text-sm font-medium text-gray-300 mb-2">
          Descrição
        </label>
        <textarea
          value={formData.description}
          onChange={(e) => handleInputChange('description', e.target.value)}
          placeholder="Digite uma descrição (opcional)"
          disabled={isLoading}
          rows={3}
          className={`
            w-full px-3 py-2 rounded-lg border bg-white/5 text-white placeholder-gray-500
            border-white/10 focus:border-blue-500/50 focus:outline-none focus:ring-2 focus:ring-blue-500/20
            disabled:opacity-50 disabled:cursor-not-allowed
            ${errors.description ? 'border-red-500/50 focus:border-red-500/50 focus:ring-red-500/20' : ''}
          `}
        />
        {errors.description && (
          <p className="mt-1 text-xs text-red-400">{errors.description}</p>
        )}
      </div>

      {/* Status */}
      <div>
        <label className="block text-sm font-medium text-gray-300 mb-2">
          Status *
        </label>
        <select
          value={formData.status}
          onChange={(e) => handleInputChange('status', e.target.value)}
          disabled={isLoading}
          className="w-full px-3 py-2 rounded-lg border bg-white/5 text-white border-white/10 focus:border-blue-500/50 focus:outline-none focus:ring-2 focus:ring-blue-500/20 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <option value="active">Ativo</option>
          <option value="inactive">Inativo</option>
        </select>
      </div>

      {/* Botões */}
      <div className="flex items-center justify-end gap-2 pt-4 border-t border-white/10">
        <WindowButton
          type="button"
          variant="secondary"
          onClick={onCancel}
          disabled={isLoading}
          icon={<X />}
        >
          Cancelar
        </WindowButton>
        
        <WindowButton
          type="submit"
          variant="primary"
          loading={isLoading}
          disabled={isLoading}
          icon={<Save />}
        >
          {initialData ? 'Atualizar' : 'Criar'}
        </WindowButton>
      </div>
    </form>
  );
}