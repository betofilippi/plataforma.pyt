name: Release

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '{{nodeVersion}}'

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"

    outputs:
      released: ${{{{ steps.release.outputs.released }}}}
      version: ${{{{ steps.release.outputs.version }}}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{{{ secrets.GITHUB_TOKEN }}}}

      - name: Setup Node.js {{nodeVersion}}
        uses: actions/setup-node@v4
        with:
          node-version: '{{nodeVersion}}'
          cache: 'npm'
          registry-url: 'https://{{#if_eq publishRegistry "npm"}}registry.npmjs.org{{else}}{{publishRegistry}}{{/if_eq}}'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: {{testCommand}}

      - name: Build project
        run: {{buildCommand}}

      - name: Semantic Release
        id: release
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: 19
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
        env:
          GITHUB_TOKEN: ${{{{ secrets.GITHUB_TOKEN }}}}
          {{#if_eq publishRegistry "npm"}}NPM_TOKEN: ${{{{ secrets.NPM_TOKEN }}}}{{/if_eq}}

  publish-module:
    name: Publish to Module Registry
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.released == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js {{nodeVersion}}
        uses: actions/setup-node@v4
        with:
          node-version: '{{nodeVersion}}'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: {{buildCommand}}

      - name: Install Plataforma SDK
        run: npm install -g @plataforma/sdk

      - name: Publish to Plataforma Registry
        run: plataforma publish --registry=${{{{ secrets.PLATAFORMA_REGISTRY_URL }}}}
        env:
          PLATAFORMA_TOKEN: ${{{{ secrets.PLATAFORMA_TOKEN }}}}

{{#if hasDocker}}
  publish-docker:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.released == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{{{ github.actor }}}}
          password: ${{{{ secrets.GITHUB_TOKEN }}}}

      - name: Build and push release image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{{{ github.repository }}}}:latest
            ghcr.io/${{{{ github.repository }}}}:v${{{{ needs.release.outputs.version }}}}
          cache-from: type=gha
          cache-to: type=gha,mode=max
{{/if}}

{{#if_contains deploymentTargets "staging"}}
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [release, publish-module]
    if: needs.release.outputs.released == 'true'
    environment: staging

    steps:
      - name: Deploy to Staging
        run: |
          echo "Deploying version ${{{{ needs.release.outputs.version }}}} to staging"
          # Add your staging deployment logic here
{{/if_contains}}

{{#if_contains deploymentTargets "production"}}
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [release, publish-module, deploy-staging]
    if: needs.release.outputs.released == 'true'
    environment: production

    steps:
      - name: Deploy to Production
        run: |
          echo "Deploying version ${{{{ needs.release.outputs.version }}}} to production"
          # Add your production deployment logic here
{{/if_contains}}

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: release
    if: always()

    steps:
      - name: Notify Success
        if: needs.release.outputs.released == 'true'
        run: |
          echo "üéâ Successfully released version ${{{{ needs.release.outputs.version }}}}"
          # Add notification logic here (Slack, Discord, etc.)

      - name: Notify Failure
        if: failure()
        run: |
          echo "‚ùå Release failed"
          # Add failure notification logic here