name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '{{nodeVersion}}'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [{{nodeVersion}}, {{#if_eq nodeVersion "18"}}20{{else}}18{{/if_eq}}]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{{{ matrix.node-version }}}}
        uses: actions/setup-node@v4
        with:
          node-version: ${{{{ matrix.node-version }}}}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run typecheck

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: {{testCommand}}

      - name: Upload coverage reports
        if: matrix.node-version == '{{nodeVersion}}'
        uses: codecov/codecov-action@v3
        with:
          token: ${{{{ secrets.CODECOV_TOKEN }}}}

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js {{nodeVersion}}
        uses: actions/setup-node@v4
        with:
          node-version: '{{nodeVersion}}'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: {{buildCommand}}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: dist/

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js {{nodeVersion}}
        uses: actions/setup-node@v4
        with:
          node-version: '{{nodeVersion}}'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{{{ secrets.SNYK_TOKEN }}}}

{{#if hasDocker}}
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{{{ github.actor }}}}
          password: ${{{{ secrets.GITHUB_TOKEN }}}}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{{{ github.repository }}}}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{{{ steps.meta.outputs.tags }}}}
          labels: ${{{{ steps.meta.outputs.labels }}}}
          cache-from: type=gha
          cache-to: type=gha,mode=max
{{/if}}

  module-validation:
    name: Module Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js {{nodeVersion}}
        uses: actions/setup-node@v4
        with:
          node-version: '{{nodeVersion}}'
          cache: 'npm'

      - name: Install Plataforma SDK
        run: npm install -g @plataforma/sdk

      - name: Validate module
        run: plataforma validate --check-deps --check-security

{{#if hasModuleFederation}}
      - name: Test module federation build
        run: |
          npm ci
          {{buildCommand}}
          # Check if remoteEntry.js exists
          test -f dist/remoteEntry.js
{{/if}}