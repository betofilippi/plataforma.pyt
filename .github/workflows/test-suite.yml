# Test Suite CI/CD Pipeline
# Comprehensive testing workflow for the Plataforma.dev application

name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Job 1: Code Quality and Static Analysis
  code-quality:
    name: Code Quality & Static Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint:check
        continue-on-error: true

      - name: Run Prettier check
        run: npm run format:check
        continue-on-error: true

      - name: Run TypeScript check
        run: npm run typecheck

      - name: Security audit
        run: npm run security:audit
        continue-on-error: true

      - name: Upload lint results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-results
          path: |
            eslint-report.json
            prettier-report.txt
          retention-days: 7

  # Job 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test
          CI: true

      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results-node-${{ matrix.node-version }}
          path: |
            coverage/
            junit.xml
            test-report.html
          retention-days: 7

  # Job 3: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: plataforma_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: npm run db:setup
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/plataforma_test
          REDIS_URL: redis://localhost:6379

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/plataforma_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret-key

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            coverage/
            integration-test-report.html
          retention-days: 7

  # Job 4: End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      matrix:
        browser: [chromium, firefox]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Start application
        run: |
          npm run start &
          npx wait-on http://localhost:3030 --timeout 60000
        env:
          NODE_ENV: test
          PORT: 3030

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          PLAYWRIGHT_BROWSER: ${{ matrix.browser }}
          BASE_URL: http://localhost:3030

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results-${{ matrix.browser }}
          path: |
            playwright-report/
            test-results/
          retention-days: 7

      - name: Upload E2E videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-videos-${{ matrix.browser }}
          path: test-results/**/video.*
          retention-days: 3

  # Job 5: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Start application
        run: |
          npm run start &
          npx wait-on http://localhost:3030 --timeout 60000
        env:
          NODE_ENV: production
          PORT: 3030

      - name: Run Lighthouse CI
        run: npx lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Run load tests with k6
        run: k6 run monitoring/k6/load-test.js
        if: github.event_name == 'push'

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: |
            .lighthouseci/
            k6-results.json
          retention-days: 7

  # Job 6: Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security tests
        run: |
          npm run test -- --testMatch='**/*.security.(test|spec).(ts|tsx|js)'
        env:
          NODE_ENV: test

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Upload security test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-test-results
          path: |
            security-report.json
            snyk-report.json
          retention-days: 7

  # Job 7: Build and Bundle Analysis
  build-analysis:
    name: Build & Bundle Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build
        env:
          NODE_ENV: production

      - name: Analyze bundle size
        run: npx bundlesize
        continue-on-error: true

      - name: Check bundle for vulnerabilities
        run: |
          npx webpack-bundle-analyzer dist/assets/*.js --mode static --report bundle-analysis.html --no-open
        continue-on-error: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            bundle-analysis.html
          retention-days: 7

  # Job 8: Coverage Report
  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download unit test coverage
        uses: actions/download-artifact@v4
        with:
          name: unit-test-results-node-18
          path: unit-coverage/

      - name: Download integration test coverage
        uses: actions/download-artifact@v4
        with:
          name: integration-test-results
          path: integration-coverage/

      - name: Merge coverage reports
        run: |
          npx nyc merge unit-coverage/coverage integration-coverage/coverage --temp-dir merged-coverage
          npx nyc report --temp-dir merged-coverage --reporter html --reporter lcov --reporter text-summary

      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.4.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info

  # Job 9: Smoke Tests (Post-deployment validation)
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [unit-tests, integration-tests, e2e-tests]
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Playwright
        run: npx playwright install chromium

      - name: Run smoke tests
        run: npm run test:smoke
        env:
          SMOKE_TEST_URL: ${{ vars.SMOKE_TEST_URL || 'http://localhost:3030' }}

      - name: Upload smoke test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: smoke-test-results
          path: |
            playwright-report/
          retention-days: 3

  # Job 10: Test Summary and Notifications
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [code-quality, unit-tests, integration-tests, e2e-tests, performance-tests, security-tests, coverage-report]

    steps:
      - name: Create test summary
        uses: actions/github-script@v7
        with:
          script: |
            const jobs = [
              { name: 'Code Quality', result: '${{ needs.code-quality.result }}' },
              { name: 'Unit Tests', result: '${{ needs.unit-tests.result }}' },
              { name: 'Integration Tests', result: '${{ needs.integration-tests.result }}' },
              { name: 'E2E Tests', result: '${{ needs.e2e-tests.result }}' },
              { name: 'Performance Tests', result: '${{ needs.performance-tests.result }}' },
              { name: 'Security Tests', result: '${{ needs.security-tests.result }}' },
              { name: 'Coverage Report', result: '${{ needs.coverage-report.result }}' }
            ];

            const summary = jobs.map(job => 
              `${job.result === 'success' ? '✅' : job.result === 'failure' ? '❌' : '⚠️'} ${job.name}: ${job.result}`
            ).join('\n');

            const overallResult = jobs.every(job => job.result === 'success') ? 'SUCCESS' : 'FAILED';
            
            core.summary.addHeading('Test Suite Results', 2);
            core.summary.addRaw(summary);
            core.summary.addHeading(`Overall Result: ${overallResult}`, 3);
            core.summary.write();

      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#dev-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: 'Test suite failed on ${{ github.ref_name }} - Check the results in GitHub Actions'

# Workflow-level timeout
timeout-minutes: 120

# Concurrency control
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true