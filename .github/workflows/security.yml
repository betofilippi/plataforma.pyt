name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'

jobs:
  dependency-check:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate --json > audit-results.json || true
          
          # Check if there are any moderate or higher vulnerabilities
          vulnerabilities=$(jq '.vulnerabilities | length' audit-results.json)
          if [ "$vulnerabilities" -gt 0 ]; then
            echo "⚠️  Found $vulnerabilities vulnerabilities"
            jq '.vulnerabilities' audit-results.json
          else
            echo "✅ No vulnerabilities found"
          fi

      - name: Upload audit results
        uses: actions/upload-artifact@v3
        with:
          name: npm-audit-results
          path: audit-results.json

      - name: Check for critical vulnerabilities
        run: |
          critical=$(jq '.vulnerabilities | map(select(.severity == "critical")) | length' audit-results.json)
          high=$(jq '.vulnerabilities | map(select(.severity == "high")) | length' audit-results.json)
          
          echo "Critical vulnerabilities: $critical"
          echo "High vulnerabilities: $high"
          
          if [ "$critical" -gt 0 ]; then
            echo "❌ Critical vulnerabilities found - failing build"
            exit 1
          elif [ "$high" -gt 3 ]; then
            echo "⚠️  Too many high severity vulnerabilities found - failing build"
            exit 1
          fi

  snyk-scan:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json-file-output=snyk-results.json

      - name: Upload Snyk results
        uses: actions/upload-artifact@v3
        with:
          name: snyk-results
          path: snyk-results.json

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'typescript' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: Build application
        run: |
          npm run build:packages
          npm run build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

  semgrep:
    name: Semgrep SAST Scan
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - uses: actions/checkout@v4

      - name: Run Semgrep
        run: |
          semgrep \
            --config=auto \
            --json \
            --output=semgrep-results.json \
            --severity=WARNING \
            --severity=ERROR \
            . || true

      - name: Upload Semgrep results
        uses: actions/upload-artifact@v3
        with:
          name: semgrep-results
          path: semgrep-results.json

      - name: Check for critical issues
        run: |
          if [ -f "semgrep-results.json" ]; then
            errors=$(jq '.results | map(select(.extra.severity == "ERROR")) | length' semgrep-results.json)
            if [ "$errors" -gt 0 ]; then
              echo "❌ Found $errors critical security issues"
              jq '.results | map(select(.extra.severity == "ERROR"))' semgrep-results.json
              exit 1
            fi
          fi

  docker-scan:
    name: Docker Image Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t plataforma:security-scan -f docker/Dockerfile .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'plataforma:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy for critical vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'plataforma:security-scan'
          format: 'json'
          output: 'trivy-results.json'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}

      - name: Upload GitLeaks results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: gitleaks-results
          path: results.sarif

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: Install license-checker
        run: npm install -g license-checker

      - name: Check licenses
        run: |
          license-checker \
            --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD' \
            --excludePrivatePackages \
            --json > license-check.json

      - name: Upload license results
        uses: actions/upload-artifact@v3
        with:
          name: license-check-results
          path: license-check.json

      - name: Verify no prohibited licenses
        run: |
          prohibited_licenses=$(license-checker --excludePrivatePackages --failOn 'GPL;AGPL;LGPL;WTFPL' --summary 2>&1 | grep -c "FAIL" || echo "0")
          if [ "$prohibited_licenses" -gt 0 ]; then
            echo "❌ Found prohibited licenses"
            license-checker --excludePrivatePackages --failOn 'GPL;AGPL;LGPL;WTFPL'
            exit 1
          else
            echo "✅ No prohibited licenses found"
          fi

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-check, snyk-scan, codeql, semgrep, docker-scan, secret-scan, license-check]
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate security summary
        run: |
          echo "# Security Scan Results" > security-report.md
          echo "" >> security-report.md
          echo "**Scan Date:** $(date -u)" >> security-report.md
          echo "**Repository:** ${{ github.repository }}" >> security-report.md
          echo "**Commit:** ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md
          
          # Job status summary
          echo "## Job Status Summary" >> security-report.md
          echo "| Job | Status |" >> security-report.md
          echo "|-----|--------|" >> security-report.md
          echo "| Dependency Check | ${{ needs.dependency-check.result }} |" >> security-report.md
          echo "| Snyk Scan | ${{ needs.snyk-scan.result }} |" >> security-report.md
          echo "| CodeQL Analysis | ${{ needs.codeql.result }} |" >> security-report.md
          echo "| Semgrep SAST | ${{ needs.semgrep.result }} |" >> security-report.md
          echo "| Docker Scan | ${{ needs.docker-scan.result }} |" >> security-report.md
          echo "| Secret Scan | ${{ needs.secret-scan.result }} |" >> security-report.md
          echo "| License Check | ${{ needs.license-check.result }} |" >> security-report.md
          echo "" >> security-report.md
          
          # Add vulnerability summary if npm audit results exist
          if [ -f "npm-audit-results/audit-results.json" ]; then
            echo "## Dependency Vulnerabilities" >> security-report.md
            vulnerabilities=$(jq '.vulnerabilities | length' npm-audit-results/audit-results.json)
            echo "- Total vulnerabilities: $vulnerabilities" >> security-report.md
            
            for severity in critical high moderate low; do
              count=$(jq --arg sev "$severity" '.vulnerabilities | map(select(.severity == $sev)) | length' npm-audit-results/audit-results.json)
              echo "- $severity: $count" >> security-report.md
            done
            echo "" >> security-report.md
          fi
          
          echo "## Recommendations" >> security-report.md
          echo "- Review and address any critical or high severity vulnerabilities" >> security-report.md
          echo "- Update dependencies to latest secure versions" >> security-report.md
          echo "- Monitor security advisories for used packages" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md

      - name: Comment security summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('security-report.md')) {
              const report = fs.readFileSync('security-report.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: report
              });
            }

      - name: Fail if critical security issues found
        if: needs.dependency-check.result == 'failure' || needs.semgrep.result == 'failure'
        run: |
          echo "❌ Critical security issues found - failing workflow"
          exit 1