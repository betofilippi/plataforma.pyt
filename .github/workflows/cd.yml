name: CD Pipeline

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  KUBECTL_VERSION: v1.28.0
  KUSTOMIZE_VERSION: v5.0.0

jobs:
  # Determine deployment targets
  setup:
    name: Setup Deployment
    runs-on: ubuntu-latest
    outputs:
      deploy-staging: ${{ steps.deploy-targets.outputs.staging }}
      deploy-production: ${{ steps.deploy-targets.outputs.production }}
      image-tag: ${{ steps.image-tag.outputs.tag }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine deployment targets
        id: deploy-targets
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.environment }}" == "staging" ]]; then
              echo "staging=true" >> $GITHUB_OUTPUT
              echo "production=false" >> $GITHUB_OUTPUT
            else
              echo "staging=false" >> $GITHUB_OUTPUT
              echo "production=true" >> $GITHUB_OUTPUT
            fi
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "staging=false" >> $GITHUB_OUTPUT
            echo "production=true" >> $GITHUB_OUTPUT
          else
            echo "staging=true" >> $GITHUB_OUTPUT
            echo "production=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine image tag
        id: image-tag
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Generate version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

  # Wait for CI to complete
  wait-for-ci:
    name: Wait for CI
    runs-on: ubuntu-latest
    steps:
      - name: Wait for CI to complete
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.ref }}
          check-name: 'CI Success'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 30

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [setup, wait-for-ci]
    if: needs.setup.outputs.deploy-staging == 'true'
    environment: 
      name: staging
      url: https://staging.plataforma.app
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBECTL_VERSION }}

      - name: Setup Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Deploy to staging
        run: |
          cd k8s/overlays/staging
          kustomize edit set image plataforma/backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.setup.outputs.image-tag }}
          kustomize edit set image plataforma/frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ needs.setup.outputs.image-tag }}
          kustomize build . | kubectl apply -f -

      - name: Wait for deployment
        run: |
          kubectl rollout status deployment/backend -n plataforma --timeout=300s
          kubectl rollout status deployment/frontend -n plataforma --timeout=300s

      - name: Run smoke tests
        run: |
          # Wait for services to be ready
          sleep 30
          
          # Test health endpoints
          kubectl run smoke-test --rm -i --restart=Never --image=curlimages/curl -- \
            curl -f http://backend-service:4000/health
          
          # Test frontend
          kubectl run smoke-test-frontend --rm -i --restart=Never --image=curlimages/curl -- \
            curl -f http://frontend-service:8080/health.html

  # Integration tests on staging
  staging-tests:
    name: Staging Integration Tests
    runs-on: ubuntu-latest
    needs: [setup, deploy-staging]
    if: needs.setup.outputs.deploy-staging == 'true'
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run integration tests against staging
        env:
          TEST_BASE_URL: https://staging.plataforma.app
          TEST_API_URL: https://staging.plataforma.app/api
        run: npm run test:staging

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [setup, wait-for-ci, staging-tests]
    if: needs.setup.outputs.deploy-production == 'true' && (success() || github.event.inputs.force_deploy == 'true')
    environment: 
      name: production
      url: https://plataforma.app
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBECTL_VERSION }}

      - name: Setup Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ secrets.AWS_REGION_PROD }}

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME_PROD }} --region ${{ secrets.AWS_REGION_PROD }}

      - name: Deploy to production (Blue-Green)
        run: |
          cd k8s/overlays/production
          
          # Update image tags
          kustomize edit set image plataforma/backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.setup.outputs.image-tag }}
          kustomize edit set image plataforma/frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ needs.setup.outputs.image-tag }}
          
          # Apply new deployment
          kustomize build . | kubectl apply -f -

      - name: Wait for deployment rollout
        run: |
          kubectl rollout status deployment/backend -n plataforma --timeout=600s
          kubectl rollout status deployment/frontend -n plataforma --timeout=600s
          kubectl wait --for=condition=ready pod -l app=plataforma -n plataforma --timeout=300s

      - name: Production smoke tests
        run: |
          sleep 60
          kubectl run prod-smoke-test --rm -i --restart=Never --image=curlimages/curl -- \
            curl -f -m 30 http://backend-service:4000/health
          curl -f -m 30 https://plataforma.app/health.html

  # Notification
  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [setup, deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          message: |
            Deployment ${{ job.status }}!
            Version: ${{ needs.setup.outputs.version }}
            Environment: ${{ needs.setup.outputs.deploy-production == 'true' && 'Production' || 'Staging' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}