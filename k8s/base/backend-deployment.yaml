apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: plataforma
  labels:
    app: plataforma
    component: backend
    tier: api
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: plataforma
      component: backend
  template:
    metadata:
      labels:
        app: plataforma
        component: backend
        tier: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      serviceAccountName: plataforma-backend
      containers:
      - name: backend
        image: plataforma/backend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 4000
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: plataforma-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: plataforma-config
              key: PORT
        - name: HOST
          valueFrom:
            configMapKeyRef:
              name: plataforma-config
              key: HOST
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: plataforma-config
              key: LOG_LEVEL
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: plataforma-secrets
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: plataforma-secrets
              key: REDIS_URL
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: plataforma-secrets
              key: JWT_SECRET
        - name: SECURITY_AUDIT_ENABLED
          valueFrom:
            configMapKeyRef:
              name: plataforma-config
              key: SECURITY_AUDIT_ENABLED
        - name: SECURITY_CSP_ENABLED
          valueFrom:
            configMapKeyRef:
              name: plataforma-config
              key: SECURITY_CSP_ENABLED
        - name: SECURITY_RBAC_ENABLED
          valueFrom:
            configMapKeyRef:
              name: plataforma-config
              key: SECURITY_RBAC_ENABLED
        - name: RATE_LIMIT_ENABLED
          valueFrom:
            configMapKeyRef:
              name: plataforma-config
              key: RATE_LIMIT_ENABLED
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: plataforma-secrets
              key: OPENAI_API_KEY
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: plataforma-secrets
              key: ANTHROPIC_API_KEY
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: storage
          mountPath: /app/storage
        - name: logs
          mountPath: /app/logs
        - name: tmp
          mountPath: /tmp
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "2Gi"
            cpu: "1000m"
            ephemeral-storage: "5Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: 4000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 4000
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health/startup
            port: 4000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: storage
        persistentVolumeClaim:
          claimName: backend-storage
      - name: logs
        emptyDir:
          sizeLimit: "1Gi"
      - name: tmp
        emptyDir:
          sizeLimit: "500Mi"
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: component
                  operator: In
                  values:
                  - backend
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backend-storage
  namespace: plataforma
  labels:
    app: plataforma
    component: backend
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: "nfs-client"

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: plataforma-backend
  namespace: plataforma
  labels:
    app: plataforma
    component: backend
automountServiceAccountToken: false

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: plataforma
  name: plataforma-backend-role
  labels:
    app: plataforma
    component: backend
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: plataforma-backend-rolebinding
  namespace: plataforma
  labels:
    app: plataforma
    component: backend
subjects:
- kind: ServiceAccount
  name: plataforma-backend
  namespace: plataforma
roleRef:
  kind: Role
  name: plataforma-backend-role
  apiGroup: rbac.authorization.k8s.io